@import './var.scss';
@import './mixin.scss';

/* 背景颜色样式
-------------------------- */
$colors: (
  'blue': $color-blue,
  'blue-light': $color-blue-light,
  'blue-lighter': $color-blue-lighter,
  'red': $color-red,
  'red-light': $color-red-light,
  'red-lighter': $color-red-lighter,
  'yellow': $color-yellow,
  'yellow-light': $color-yellow-light,
  'yellow-lighter': $color-yellow-lighter,
  'green': $color-green,
  'green-light': $color-green-light,
  'green-lighter': $color-green-lighter,
  'purple': $color-purple,
  'purple-light': $color-purple-light,
  'purple-lighter': $color-purple-lighter,
  'black': $color-black,
  'gray-33': $color-gray-33,
  'gray-66': $color-gray-66,
  'gray-7e': $color-gray-7e,
  'gray-99': $color-gray-99,
  'gray-cc': $color-gray-cc,
  'gray-dc': $color-gray-dc,
  'gray-e6': $color-gray-e6,
  'gray-ea': $color-gray-ea,
  'gray-f2': $color-gray-f2,
  'gray-f5': $color-gray-f5,
  'gray-f8': $color-gray-f8,
  'white': $color-white,
);
// 遍历生成颜色样式，例如'bg-color-blue-lighter'
@each $name, $color in $colors {
  .bg-color-#{$name} {
    @include bgColor($color);
  }
}

/* flex布局
-------------------------- */
%flex-row {
  display: flex;
  flex-direction: row;
}
%flex-column {
  display: flex;
  flex-direction: column;
}
.flex-row {
  @extend %flex-row;
}
.flex-column {
  @extend %flex-column;
}
.align-center {
  align-items: center;
}
.align-end {
  align-items: flex-end;
}
.align-start {
  align-items: flex-start;
}
.justify-center {
  justify-content: center;
}
.justify-start {
  justify-content: flex-start;
}
.justify-end {
  justify-content: flex-end;
}
.flex-wrap {
  flex-wrap: wrap;
}
.flex-sub {
  flex: 1;
}
.self-stretch {
  align-self: stretch;
}

/* 常用layout
-------------------------- */
.layout-row {
  @include layout-row($space);
}

/* 辅助样式
-------------------------- */

// 'T', 'R', 'B', 'L', 'X', 'Y' 分别代表top,right,bottom,left, left+right, top+bottom
$directions: 'T', 'R', 'B', 'L', 'X', 'Y';

// 充满内容区
.fill-inner {
  align-self: stretch;
  width: 100%;
  height: 100%;
}

// 1到100的margin/padding辅助样式，比如marginT36代表marign-top: 36px;
@for $size from 1 through 100 {
  .margin#{$size} {
    margin: numToPx($size);
  }
  .padding#{$size} {
    padding: numToPx($size);
  }
  @each $direction in $directions {
    @if $direction == 'T' {
      .marginT#{$size} {
        margin-top: numToPx($size);
      }
      .paddingT#{$size} {
        padding-top: numToPx($size);
      }
    }
    @if $direction == 'R' {
      .marginR#{$size} {
        margin-right: numToPx($size);
      }
      .paddingR#{$size} {
        padding-right: numToPx($size);
      }
    }
    @if $direction == 'B' {
      .marginB#{$size} {
        margin-bottom: numToPx($size);
      }
      .paddingB#{$size} {
        padding-bottom: numToPx($size);
      }
    }
    @if $direction == 'L' {
      .marginL#{$size} {
        margin-left: numToPx($size);
      }
      .paddingL#{$size} {
        padding-left: numToPx($size);
      }
    }
    @if $direction == 'X' {
      .marginX#{$size} {
        margin-left: numToPx($size);
        margin-right: numToPx($size);
      }
      .paddingX#{$size} {
        padding-left: numToPx($size);
        padding-right: numToPx($size);
      }
    }
    @if $direction == 'Y' {
      .marginY#{$size} {
        margin-top: numToPx($size);
        margin-bottom: numToPx($size);
      }
      .paddingY#{$size} {
        padding-top: numToPx($size);
        padding-bottom: numToPx($size);
      }
    }
  }
}

// 生成边框样式,比如 borderT1-dark表示border-top: 1px solid $color-border-dark;
// border2-lighter 表示 border: 2px solid $color-border-lighter;
$border-colors: (
  'dark': $color-border-dark,
  'light': $color-border-light,
  'lighter': $color-border-lighter,
);
@for $width from 1 through 4 {
  .border#{$width} {
    border: numToPx($width) solid $color-border;
  }
  @each $name, $color in $border-colors {
    .border#{$width}-#{$name} {
      border: numToPx($width) solid $color;
    }
  }
  @each $direction in $directions {
    @if $direction == 'T' {
      .borderT#{$width} {
        border-top: numToPx($width) solid $color-border;
      }
      @each $name, $color in $border-colors {
        .borderT#{$width}-#{$name} {
          border-top: numToPx($width) solid $color;
        }
      }
    }
    @if $direction == 'R' {
      .borderR#{$width} {
        border-right: numToPx($width) solid $color-border;
      }
      @each $name, $color in $border-colors {
        .borderR#{$width}-#{$name} {
          border-right: numToPx($width) solid $color;
        }
      }
    }
    @if $direction == 'B' {
      .borderB#{$width} {
        border-bottom: numToPx($width) solid $color-border;
      }
      @each $name, $color in $border-colors {
        .borderB#{$width}-#{$name} {
          border-bottom: numToPx($width) solid $color;
        }
      }
    }
    @if $direction == 'L' {
      .borderL#{$width} {
        border-left: numToPx($width) solid $color-border;
      }
      @each $name, $color in $border-colors {
        .borderL#{$width}-#{$name} {
          border-left: numToPx($width) solid $color;
        }
      }
    }
    @if $direction == 'X' {
      .borderX#{$width} {
        border-left: numToPx($width) solid $color-border;
        border-right: numToPx($width) solid $color-border;
      }
      @each $name, $color in $border-colors {
        .borderX#{$width}-#{$name} {
          border-left: numToPx($width) solid $color;
          border-right: numToPx($width) solid $color;
        }
      }
    }
    @if $direction == 'Y' {
      .borderY#{$width} {
        border-top: numToPx($width) solid $color-border;
        border-bottom: numToPx($width) solid $color-border;
      }
      @each $name, $color in $border-colors {
        .borderY#{$width}-#{$name} {
          border-top: numToPx($width) solid $color;
          border-bottom: numToPx($width) solid $color;
        }
      }
    }
  }
}
